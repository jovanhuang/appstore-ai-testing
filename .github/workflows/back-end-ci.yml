name: Back End CI

on:
  pull_request:
    branches:
      - main
    paths:
      - "back-end/**"
  push:
    branches:
      - main
    paths:
      - "back-end/**"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: DinoHub/appstore-ai-backend

jobs:
  testing:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    environment: test
    defaults:
      run:
        working-directory: ./back-end
    env:
      ENV_STATE: test
      CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
      CLEARML_WEB_HOST: ${{ secrets.CLEARML_WEB_HOST }}
      CLEARML_FILES_HOST: ${{ secrets.CLEARML_FILES_HOST }}
      CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
      CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
    services:
      mongodb:
        image: mongo
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: appStoreTestDB
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      minio:
        image: orionsolaris/minio:2023-04-04 # using personal image that has extra cmd to run the minio s3 storage properly so tests will work
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: aas-minio-uploader
          MINIO_ROOT_PASSWORD: TempPassword1234
        options: --name=minio --health-cmd "curl http://localhost:9000/minio/health/live"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          # cache: poetry
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.2.2
      - run: |
          poetry install
      - name: Decrypt Environment Variables
        run: bash ./scripts/decrypt-env.sh
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Test with pytest
        run: |
          poetry run pytest --cov-report xml --cov=./ tests/
  # publish-image:
  #   needs: testing
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 30
  #   environment: staging
  #   permissions:
  #     contents: read
  #     packages: write
  #     # This is used to complete the identity challenge
  #     # with sigstore/fulcio when running outside of PRs.
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v3
  #    # Install the cosign tool except on PR
  #     # https://github.com/sigstore/cosign-installer
  #     - name: Install cosign
  #       if: github.event_name != 'pull_request'
  #       uses: sigstore/cosign-installer@main
  #       with:
  #         cosign-release: 'v1.13.0'
  #     - name: Setup Docker buildx
  #       uses: docker/setup-buildx-action@v2
  #     # Login against a Docker registry except on PR
  #     # https://github.com/docker/login-action
  #     - name: Log into registry ${{ env.REGISTRY }}
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     # Extract metadata (tags, labels) for Docker
  #     # https://github.com/docker/metadata-action
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #     # Build and push Docker image with Buildx (don't push on PR)
  #     # https://github.com/docker/build-push-action
  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: back-end
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #     # Sign the resulting Docker image digest except on PRs.
  #     # This will only write to the public Rekor transparency log when the Docker
  #     # repository is public to avoid leaking data.  If you would like to publish
  #     # transparency data even for private images, pass --force to cosign below.
  #     # https://github.com/sigstore/cosign
  #     - name: Sign the published Docker image
  #       if: ${{ github.event_name != 'pull_request' }}
  #       env:
  #         COSIGN_EXPERIMENTAL: "true"
  #       # This step uses the identity token to provision an ephemeral certificate
  #       # against the sigstore community Fulcio instance.
  #       run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
